                    ** Operadores de vim **

Los Operadores son las acciones que trabajan sobre el texto. Punto.
Se pueden combinar con movimientos de vim y con objetos de texto lo cual los
hace muy flexibles.

===========================================================================

Operadores que guardan el texto en un registro.

    d  :  Operador "delete". Corta el texto

    c  :  Operador "change". Corta el texto y entra en modo inserción.

    y  :  Operador "yank". Copia el texto.


Los siguientes operadores copian el texto elegido en el registro que se
especifique. Por defecto se usa el "registro sin nombre"

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 1: (Abrir con 'gf' o 'gF')
    1.7_Ejercicio1.c
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*


*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 2:
    *****%%%%%
    *****%%%%%
    %%%%%*****
    %%%%%*****
Forme una figura similar a la anterior pero en grande.

    ***********************************###################################

                                        Aplicar operador sobre línea => _

Respuesta sugerida (Abrir con 'zo' y cerrar con 'zc') {{{
    Copia una línea con 'y_' y pégala repetidas veces con 'p' hasta
    formar un poco más de la mitad de un cuadrado (aproximadamente).
    Al principio de la última línea teclea 'dt#' para cortar los
    asteriscos del principio y luego '$p' para pegarlos al final.
    Nuevamente copia con 'y_' y pega hasta hacer la otra mitad del
    cuadrado.
}}}
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

===========================================================================

Operadores de formato (Principalmente para programar)

    =   :   Operador que "re-indenta" (solo si conoce el lenguaje con que
            trabaja, cuando no domina uno se le puede añadir soporte a
            partir de un plugin)

    <   :   Elimina un nivel de sangría
    >   :   Añade un nivel de sangría
    
** Nota: La cantidad de espacios por sangría depende de 'shiftwidth' 'sw'

    gq  :   Operador "formatea". Usa un programa externo establecido con
            'formatprg' para dar formato y embellecer el código.
            (Véase la lección de filtros)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 3: (La línea de inicio importa, abrir con 'gF')
        1.7_Ejercicio3.cs:44
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

===========================================================================

Operadores de transformación de texto

    gu  :   Convertir a minúscula
    gU  :   Convertir a mayúscula
    g~  :   Intercambiar mayúsculas por minúsculas y viceversa
    g?  :   Codificar en ROT13 (una codificación simple y auto-reversible)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 4: Descodificar el siguiente texto codificado en ROT13

       "Hay tres maneras de editar texto en Unix:
        - A la manera de vim
        - A la manera de emacs
        - A la manera incorrecta"
                            Viejo proverbio de los sysadmin

*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

===========================================================================

Extras (Cada uno de los cuales requiere su propia lección por lo que
se posponen)

    !   :   Filtrar a través de un programa externo
    zf  :   Crear un "doblez"
    g@  :   Llamar una función establecida por la opción 'operatorfunc'


===========================================================================

Aplicar operador sobre toda la línea.

Usando '{op}_' se puede aplicar '{op}' en una línea. La mayoría de los
operadores tiene un alias para hacer lo mismo más rápido: Repetir la
última letra del operador:

        dd   :  Igual a d_. Elimina línea actual
        yy   :  Igual a y_. Copia línea actual
        cc   :  Igual a c_. Elimina línea actual y entra en modo inserción
        ==   :  Re-indenta línea actual
        >>   :  Añade sangría a la línea actual
        <<   :  Quita sangría a la línea actual
        gqq  :  Formatea la línea actual con el programa de 'formatprg'
        !!   :  Filtra la línea actual con un programa externo
        guu  :  Pasa la línea actual a minúsculas la línea actual
        gUU  :  Pasa la línea actual a mayúsculas la línea actual
        g~~  :  Intercambia mayúsculas/minúsculas de la línea actual
        g??  :  Codifica en ROT13 la línea actual

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 4: Reordene las siguientes líneas
    2. Ipsum optio nihil itaque cumque ipsa.
    4. Amet debitis debitis quibusdam itaque accusantium
    1. Sit aut cum vero maiores quibusdam?
    3. Sit a in beatae voluptatem nobis.
                                                    Pegar detrás: P
                                                    Pegar enfrente: p
Respuesta sugerida {{{
    Desde la primera línea: '2ddpjddp'

    2ddp Corta dos líneas y las pega enfrente
    j    Baja una posición
    ddp  Corta una línea y la pega enfrente
}}}
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

===========================================================================

Operaciones de caracteres y operaciones de línea

Tanto los comandos de movimiento como los operadores se pueden clasificar
en comandos "de caracteres" (character-wise) y "de línea" (line-wise).

Como ejemplos en cuanto a comandos de movimiento, los movimientos a los
laterales 'h' y 'l' son "de caracteres" y los movimientos arriba y
abajo 'j' y 'k' son "de línea".

Por el lado de los operadores, 'd', 'c', 'y', etc son operadores de
carácter y '<' y '>' son operadores de línea.

Al hacer una acción, si tanto el operador como el movimiento son
comandos de caracteres, la operación opera justo en los elementos
referidos. Si el operador o el movimiento son comandos de línea
entonces el resultado final opera sobre líneas completas.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 5: Sobre el símbolo "|" del párrafo del ejercicio
presiona 'j'.  Regrese al "|" y ahora presione '/z<Return>'. 
Ambos movimientos deben posicionarlo en el mismo lugar.

Por segunda vez vuelve a la posición marcada con "|" y presiona 'dj'.
Aunque 'd' es un operador de caracteres, 'j' es un movimiento de
línea por lo que la operación resultante elimina dos líneas completas.

Para terminar, deshaz el cambio y presiona 'd/z<Return>'.
Ahora ni el operador 'd' ni el comando de movimiento 'j' trabajan por
líneas por lo que la eliminación se hace exactamente entre los dos
puntos de movimiento.

    Adipisicing earum a "|" dolore sunt nesciunt Sint
    culpa atque impedit azimi maxime.

*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

** NOTA: LA NOTACIÓN {OPERADOR}_ ES SIEMPRE UNA OPERACIÓN DE LÍNEA.

===========================================================================

Aplicar operador hasta el final de la línea

Algunos operadores de una letra tienen un alias para operar desde la
posición actual hasta el final de la línea, es decir {operador}$.
Estos alias están compuestos de la misma letra del operador escrita
en mayúsculas:

        D   :  Igual a d_. Elimina línea actual
        C   :  Igual a c_. Elimina línea actual y entra en modo inserción

El único de los operadores básicos que no cumple esta propiedad es el
operador "yank". La 'Y' mayúscula en realidad es equivalente a 'y_' al
igual que 'yy'.
Para conservar la consistencia, puedes redefinir 'Y' para que copie
hasta el fin de línea de la siguiente manera:

    :nnoremap Y y$

Esa línea se puede añadir a tu configuración de vim para gozar
de consistencia en los operadores básicos.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 6:  1.7_Ejercicio6.c:11
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*
___________________________________________________________________________

Al igual que hay plugins que añaden nuevos objetos de texto. Hay otros
que añaden operadores para que trabajen con los operadores. Algunos de
los mejores son:
    * https://github.com/tpope/vim-surround: Operador para encerrar
      texto entre símbolos o etiquetas XML.
    * https://github.com/tpope/vim-commentary: Operador para comentar
      y des-comentar texto.

<----Archivo anterior                                Archivo siguiente---->
  :prev[ious]                                                     :n[ext]

vim: fdm=marker
