                        ** Comenzando a moverse **

Nuevamente, el movimiento básico se hace mediante hjkl
                             k
                             ↑
                        h  ←   →  l
                             ↓
                             j

(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
Sección opcional para interesados en la personalización de vim.

Si se desactivan las flechas de dirección suele ser más rápido el
aprendizaje de los comandos "hjkl" para movimiento.  El siguiente script
anula la acción de las dichas teclas (abrir archivo con gf, dentro tiene
instrucciones de uso):

    1.2_Script_DesactivarFlechas.vim

)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 1: Camine a través del laberinto usando las teclas de la columna
principal de su teclado.
       Inicio
         ↓↓
       →    ←
        *  ****************************
        *  *******           **********
        *  *******  *******  **********
        *        *  *     *  **       *
        *******  *  *  *  *  **  ***  *
        *        *     *  *  **  ***  *
        *  *************  *      ***  *
        *  *              **********  *
        *  *  *************           *
        *  *            ***  **********
        *  ***********  ***  **********  ↓  M
        *               ***               ← e
        *******************************  ↑  t
                                            a
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

Por defecto, los comandos h (ache) y l (ele) se detienen en los extremos
sin cambiar de línea como lo haría un editor tradicional.
Dicho comportamiento se puede cambiar modificando la opción 'whichwrap'
('ww') de la siguiente forma.
        :set whichwrap+=h,l
o abreviando:
        :se ww+=h,l

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 2: Establecer la opción anterior y usarla para recorrer el
segundo laberinto.
 ↓

| ********|
|    |    |
|*** | ** |
|***   **
  *********
|         |
********* |

         ↑
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

Puedes regresar al comportamiento original de las teclas con alguno de los
siguientes:
        Quitar h y l de la lista separada por comas
            :set whichwrap-=h,l
        Regresar la opción 'whichwrap' a su estado por defecto
            :set whichwrap&

Si te gusta una opción de configuración puedes añadirla a tu archivo
configuración (suele ser ~/.vimrc). Si dicho archivo no existe basta con
crearlo.
Puedes añadir la opción sin salir de vim de la siguiente forma:
    :!echo set whichwrap+=h,l >> .vimrc

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 3: Activar la opción booleana 'relativenumber' ('rnu') y usarla
para eliminar las líneas marcadas con ">>>>". Después se puedes desactivar
la opción.
    Ipsum quidem architecto sunt consequuntur voluptatem. Dicta laboriosam?
    Elit rem labore qui hic dolorum? Quos laboriosam?
    Lorem repellat fugiat dolor distinctio inventore? Omnis ipsa?
    Dolor dolorum reprehenderit minus perferendis aliquid. Consequatur
    Amet accusantium ducimus repudiandae id perferendis minus? Vitae
    >>>>
    Lorem doloremque eveniet nobis quo ipsum fugit, placeat.
    Amet distinctio cupiditate suscipit ad eos? Saepe voluptatem
    Ipsum ad eaque rerum hic nam Amet optio!
    Adipisicing reiciendis aperiam sit ullam unde totam Cupiditate
    Ipsum voluptatum consectetur optio quos cupiditate? Facere eius
    Consectetur fugit unde provident quam nulla nesciunt. In?
    >>>>
    Adipisicing omnis ipsa laboriosam rerum omnis? Vel repudiandae.
    Adipisicing nostrum assumenda nisi impedit aperiam Numquam voluptas!
    Elit possimus voluptatem ad eveniet sunt, quam consequuntur
    >>>>
    Consectetur unde veniam tempora cum obcaecati. Sunt omnis
    Consectetur harum quis officiis impedit eum exercitationem. Quos.
    Adipisicing tempora porro distinctio inventore deserunt! Nulla alias.
                                                    Operador eliminar => d
                                                    Aplicar a la línea => _

Respuesta sugerida (Abrir o cerrar za) {{{
    'relativenumber' es una opción booleana, las cuales se activan
    directamente con su nombre
    Si una opción se llamase 'lorem', se activa con:
        :set lorem
    Y se desactiva añadiendo la palabra 'no' al nombre de la opción:
        :set nolorem
    También suele haber abreviaciones para cada opción. En el caso de
    'relativenumber' se abrevia 'rnu', por lo que puede activarse con
    cualquiera de las siguientes:
        :set relativenumber
        :se rnu
    Y se puede desactivar posteriormente con:
        :set norelativenumber
        :se nornu

    Una vez hayas activado 'relativenumber' podrás ver las distancias de
    cada línea relativas a tu posición actual lo cual nos indicará el
    prefijo numérico para saltar de manera directa a cierta línea
    Si un texto, por ejemplo, se encuentra 4 líneas por encima de tu
    posición de escritura, puedes alcanzarlo escribiendo 4k
    Habiendo llegado a una línea marcada con ">>>>" las eliminará con d_
    (letra d y guión bajo)
    Luego salta a las líneas restantes usando el
    mismo método y repite con . (punto)
}}}
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
Jugando snake con las teclas de vim (abrir con gf):

    1.2_Script_JuegoSnake.vim

)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

===========================================================================

Los comandos w, b, e y ge se mueven por palabras.  A diferencia de del
movimiento por letras, el movimiento por palabras te cambia de línea por
defecto cuando llegas al final o al principio de una.

        ↱ b  ge     w   e
       ← -------- -------- →
                          ↲

Los comandos b y w dan saltos a los inicios de las palabras mientras que
los comandos ge y e dan saltos a los finales de las palabras, hacia atrás y
hacia adelante respectivamente.

       Palabra1     Palabra2    Palabra3    Palabra4
                    ^      ^    ^      ^
                    |      |    |      |
                   w,b   e,ge  w,b    e,ge

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 4: Elimina todos los sitios marcados por un '|'
    Consectetur qui expedita | laborum doloremque
    Adipisicing facilis | consectetur dolorem doloribus
    Ipsum dignissimos accusantium eos illum
    Dolor | exercitationem quae voluptatem deleniti |
    Lorem dolorem unde illum amet!
                                        Borrar (alrededor) palabra => daw

Respuesta sugerida (Abrir o cerrar za) {{{
    Use w o e para moverse por palabras hasta encontrar las "|" y daw para
    borrar la primera ocasión
    Para el resto simplemente repita con .
}}}
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 5: Cambie los adjetivos del siguiente texto por adverbios
añadiendo el sufijo "mente" (Ejemplo: veloz => velozmente)
    Fuerte suspiró. La abrazó temblorosa.
    Paró en seco, enorme asustado.
    Gritó firme a la persona frente de si.

                                                    Insertar enfrente => a

Respuesta sugerida (Abrir o cerrar za) {{{
    No existe un comando "insertar al final de la palabra" así que se
    deberán usar dos comandos.
    Posicionate en "Fuerte" que es el primer adjetivo y presiona
        eamente<C-[>
    Esto añade "mente" a la palabra mediante dos comandos:
        - El comando simple 'e' que se mueve al final de la palabra
        - El comando compuesto 'a{Texto}<C-[>' que escribe {Texto} (en este
          caso "mente") en la posición de enfrente del cursor
    Únicamente el segundo comando se registrará y será repetible dado que
    el primero es un comando de movimiento, no de edición, por lo que la
    posición de tu cursor en la palabra será importante al repetir
    Muévete al final de cada palabra en cuestión y repite la inserción de
    "mente" con .
}}}
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

Nota: La definición de "palabra" puede ser alterada, véase
1.6_Ejercicio5.css para un ejemplo.

===========================================================================

Aunque extraña, la forma más eficiente de moverse en una línea es usando
comandos de búsqueda de caracteres.
La letra f seguida de un carácter te mueve a la siguiente aparición de
dicho carácter y la letra F mueve a la aparición anterior.  Las letras t y
T hacen prácticamente lo mismo, pero avanzan un carácter menos.

      ↱  ,                                      ,  ↰
      ⬑ ←    ;  ←  T{char} ←   → t{char}  →  ;    →⬏
      ⬐ ←    ;  ←  F{char} ←   → f{char}  →  ;    →⬎
      ↳  ,                                      ,  ↲

Una vez realizada una búsqueda por caracteres, dicha búsqueda se puede
repetir usando el carácter ; (punto y coma).
La , (coma) hace la misma búsqueda en dirección contraria.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 6: Cambie todas las apariciones de punto por una coma
    Dolor voluptatibus. accusamus facere. labore quia.
    .Consectetur. numquam labore. consequuntur alias aspernatur
    Ipsum dolor ut sunt. molestiae esse!
    Dolor. ducimus dignissimos. ipsam temporibus animi.
    .Amet blanditiis. quo incidunt qui nobis.
                                Insertar enfrente de posición actual => a

Respuesta sugerida (Abrir o cerrar con za) {{{
    Al principio de la primera línea presiona f. (f y punto) para llegar a
    la primera aparición de punto y use a<BS>,<Esc> (<BS> es la tecla de
    borrar)
    La búsqueda se podrá repetir mediante ; y , (hacia adelante y hacia
    atrás respectivamente) y se puede repetir la sustitución mediante .
    Repitiendo las búsquedas se puede llegar al resto de los puntos y
    repitiendo la sustitución se puede convertir cada punto en una coma
}}}
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 7: Elimina las comas y pon cada número en una línea distinta
    102,25,4096,-10,22.5,55,999,123123,2
                                Insertar enfrente de posición actual => a

    Opción recomendada para el ejercicio: 'autoindent' ('ai')
                                          (opción booleana)

Respuesta sugerida (Abrir o cerrar 'za') {{{

Con 'autoindent' activado:
    Con el cursor posicionado antes de la primera coma teclea f, (f y coma)
    que buscará la primera aparición de "," y a<BS><Return><C-[> (a, tecla
    borrar, enter y control + corchete abierto) que borrara dicha coma y
    dará un salto de línea
    Podrás repetir la búsqueda con ; y repetir la edición con . hasta
    finalizar con los elementos

Sin 'autoindent' activado:
    Empezamos con f, nuevamente pero esta vez usaremos
        a<Del><Return><Space><Space><Space><Space><C-[>

    El resto se repite de la misma forma
}}}
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 8: (Abrir con gf)
    1.2_Ejercicio8.java
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

** Nota: Las opciones de vim no permiten que la búsqueda de caracteres se
efectué a través de varias líneas. En todo caso, se puede crear dicho
comportamiento a través de definir una función como lo hace el siguiente
script:

    1.2_Script_BusquedaCharsMultiLinea.vim

===========================================================================

Por último, es posible moverse entre el principio y el final de una
línea a partir de varios comandos.
Los comandos 0 y $ permiten moverse entre el inicio y el final
absolutos.
Los comandos ^ y g_ se mueven al primer y último carácter visible
respectivamente.

                  0  ←  ^  ←   →  g_  →  $

** Nota: El carácter ̣_ (guion bajo) sirve para lo mismo que ^ (acento
circunflejo) cuando se usa solo, pero actúan diferente en cuando se usan en
conjunto con un operador.

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 9: Prueba las diferencias entre 0 y ^ así como entre g_ y $ en la
siguiente línea:
        Dolor voluptatibus accusamus facere labore quia.
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
Ejercicio 10: Arregla el siguiente recuadro para que se vea regular
+----------------------------------------------------------------+
*                  ============================                  |
|                  $                          $                  *
                   *                          $                  |
|                  $                          *
                   *                          $                  |
|                  $                          $                  *
*                  ============================                  |
+----------------------------------------------------------------+
                                            Reemplazar carácter => r{char}

Respuesta sugerida (Abrir o cerrar za) {{{
    Por motivos de práctica se sugiere empezar de adentro hacía afuera y de
    línea en línea (Aunque en realidad no sea eficiente) probando los
    movimientos recién vistos para moverse a las posiciones requeridas
    Para sustituir un solo carácter por otro se puede usar a<BS>{Char}<Esc>
    como vimos anteriormente o simplemente r{Char} que es un comando muy
    simple que te permite permanecer en modo normal todo el tiempo.
}}}
*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*v*
___________________________________________________________________________
https://vim-adventures.com  Página que sabe la mejor forma de memorizar
                            los comandos: jugando

https://www.shortcutfoo.com Juego para memorizar comandos de editores
                            comunes y competir contra la computadora

Plugins relacionados con moverse:
  * https://github.com/prendradjaja/vim-vertigo: Plugin para moverse
    por líneas sin sacar los dedos de la fila principal.

  * https://github.com/easymotion/vim-easymotion: Plugin para movimiento
    directo a cualquier texto visible.

<----Archivo anterior                                Archivo siguiente---->
  :prev[ious]                                                     :n[ext]

vim: fdm=marker tw=75
